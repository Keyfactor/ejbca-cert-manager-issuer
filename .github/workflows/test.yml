name: test
on: [workflow_dispatch, push, pull_request]
jobs:
  build:
    name: Build and Lint
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      # Checkout code
      # https://github.com/actions/checkout
      - name: Checkout code
        uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608 # v4.1.0

      # Setup GoLang build environment
      # https://github.com/actions/setup-go
      - name: Set up Go 1.x
        uses: actions/setup-go@93397bea11091df50f3d7e59dc26a7711a8bcfbe # v4.1.0
        with:
          go-version-file: 'go.mod'
          cache: true

      # Download dependencies
      - run: go mod download

      # Build Go binary
      - run: go build -v .

      # Run Go linters
      # https://github.com/golangci/golangci-lint-action
      - name: Run linters
        uses: golangci/golangci-lint-action@3a919529898de77ec3da873e3063ca4b10e7f5cc # v3.7.0
        with:
          version: latest

  test:
    name: Go Test
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      # Checkout code
      # https://github.com/actions/checkout
      - name: Checkout code
        uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608 # v4.1.0

      # Setup GoLang build environment
      # https://github.com/actions/setup-go
      - name: Set up Go 1.x
        uses: actions/setup-go@93397bea11091df50f3d7e59dc26a7711a8bcfbe # v4.1.0
        with:
          go-version-file: 'go.mod'
          cache: true

      # Run Go tests
      - name: Run go test
        run: go test -v ./...

  integration:
    name: Integration Test with cert-manager
    needs: test
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        certmanagerversion:
          - '1.15.0'
          - '1.14.6'
          - '1.12.11'
          - '1.13.6'
    
    steps:
      # Checkout code
      # https://github.com/actions/checkout
      - name: Checkout code
        uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608 # v4.1.0

      - run: sudo apt-get install jq curl openssl

      # Setup GoLang build environment
      # https://github.com/actions/setup-go
      - name: Set up Go 1.x
        uses: actions/setup-go@93397bea11091df50f3d7e59dc26a7711a8bcfbe # v4.1.0
        with:
          go-version-file: 'go.mod'
          cache: true

      # Install cmctl
      - name: Install cmctl
        run: |
          OS=$(go env GOOS); ARCH=$(go env GOARCH); curl -fsSL -o cmctl https://github.com/cert-manager/cmctl/releases/latest/download/cmctl_${OS}_${ARCH}
          chmod +x cmctl
          sudo mv cmctl /usr/local/bin
          cmctl --help

      # Create a single-node K8s cluster with Kind
      # Then, deploy an ephemeral EJBCA and SignServer
      - uses: m8rmclaren/ejbca-signserver-k8s@main
        with:
          deploy-k8s: 'true'
          deploy-nginx-ingress: 'true'
          deploy-signserver: 'false'

      # Set up cert-manager
      - name: Set up cert-manager
        run: |
          helm repo add jetstack https://charts.jetstack.io
          helm repo update
          helm install \
            cert-manager jetstack/cert-manager \
            --namespace cert-manager \
            --create-namespace \
            --version "${{ matrix.certmanagerversion }}" \
            --set installCRDs=true

      # Run integration test
      - name: Run integration test
        run: |
          chmod +x test/integrationtest.sh
          ./test/integrationtest.sh
